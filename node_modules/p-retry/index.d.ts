import {OperationOptions} from 'retry';

declare class AbortErrorClass extends Error {
	readonly name: 'AbortError';
	readonly originalError: Error;

	/**
	Abort retrying and reject the promise.

	@param message - Error message or custom error.
	*/
	constructor(message: string | Error);
}

declare namespace pRetry {
	interface FailedAttemptError extends Error {
		readonly attemptNumber: number;
		readonly retriesLeft: number;
	}

	interface Options extends OperationOptions {
		/**
		Callback invoked on each retry. Receives the error thrown by `input` as the first argument with properties `attemptNumber` and `retriesLeft` which indicate the current attempt number and the number of attempts left, respectively.

		The `onFailedAttempt` function can return a promise. For example, to add a [delay](https://github.com/sindresorhus/delay):

		```
		import pRetry = require('p-retry');
		import delay = require('delay');

		const run = async () => { ... };

		(async () => {
			const result = await pRetry(run, {
				onFailedAttempt: async error => {
					console.log('Waiting for 1 second before retrying');
					await delay(1000);
				}
			});
		})();
		```

		If the `onFailedAttempt` function throws, all retries will be aborted and the original promise will reject with the thrown error.
		*/
		readonly onFailedAttempt?: (error: FailedAttemptError) => void | Promise<void>;
	}

	type 